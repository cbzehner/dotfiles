autoload -Uz compinit promptinit
compinit
promptinit

export EDITOR=nvim
export VISUAL=nvim

# Enable vim bindings
bindkey -v

# Autocompletion settings
setopt COMPLETE_ALIASES

# Protect files from accidental use of > instead of >>, override with >!
set -o noclobber

# Persistent rehash (automatically check for new executables in $PATH)
zstyle ':completion:*' rehash true

# Get operating system
platform='unknown'
unamestr=$(uname)
if [[ $unamestr == 'Linux' ]]; then
  platform='linux'
elif [[ $unamestr == 'Darwin' ]]; then
  platform='darwin'
fi

# Set additional environmental variables
if [[ $unamestr == 'Darwin' ]]; then
  # Add .local/bin to the path, Haskell's Stack package manager installs here
  export PATH=$PATH:/Users/cbzehner/.local/bin/:/usr/local/bin
fi

###########
# Aliases #
###########

# Always use neovim
alias e='nvim '
alias v='nvim '
alias vi='nvim '
alias vim='nvim '

# Editing dotfiles
alias ze='nvim ~/.bashrc'
alias za='nvim ~/.bash_aliases'
alias te='nvim ~/.tmux.conf'

# Reload zshrc
alias zr='source ~/.bashrc'

# Mimic Vim exit
alias :q='exit'

# Show human friendly numbers and colors
alias df='df -h'
alias du='du -h -d 2'

# make executable
alias ax="chmod a+x"

# Get your current public IP
alias ip="curl icanhazip.com"

# batch change extension (fix from Lri, again)
chgext() {
  for file in *.$1 ; do mv "$file" "${file%.$1}.$2" ; done
}

# PS
alias psa="ps aux"
alias psg="ps aux | grep "

# Moving around
alias cdb='cd -'
alias cls='clear;ls'

# Show human friendly numbers and colors
alias df='df -h'
alias du='du -h -d 2'

if [[ $platform == 'linux' ]]; then
  alias ll='ls -alh --color=auto'
  alias ls='ls --color=auto'
elif [[ $platform == 'darwin' ]]; then
  alias ll='ls -alGh'
  alias ls='ls -Gh'
fi

# show me files matching "ls grep"
alias lsg='ll | grep'

# Common shell functions
alias less='less -r'
alias tf='tail -f'
alias l='less'
alias lh='ls -alt | head' # see the last modified files
alias screen='TERM=screen screen'
alias cl='clear'
alias v='vim'

# always use warnings
alias make='make -Wall'

# mimic vim functions
alias :q='exit'

# vimrc editing
alias ve='vim ~/.vimrc'

# zsh profile editing
alias ze='vim ~/.zshrc'
alias zr='source ~/.zshrc'

# Finder
alias showFiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
alias hideFiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'

# Homebrew
alias brewu='brew update && brew upgrade && brew cleanup && brew prune && brew doctor'

# Global aliases
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g C='| wc -l'
alias -g H='| head'
alias -g L="| less"
alias -g N="| /dev/null"
alias -g S='| sort'
alias -g G='| grep' # now you can do: ls foo G something

#############
# FUNCTIONS #
#############

# (f)ind by (n)ame
# usage: fn foo 
# to find all files containing 'foo' in the name
function fn() { ls **/*$1* }


##########
# PROMPT #
##########

# user@hostname: <directory> (branch/bookmark)		[ErrorCode] <Time Stamp>
# > 
PROMPT=$'%F{magenta}%n%f@%F{red}%m%f: %F{green}%~%f %F{blue}(branch/bookmark)%f\n%# '
RPROMPT='[%(0?.%F{white}.%F{red}%BError: )%?%b%f] %F{white}%D %T%f'

function prompt_char {
    git branch >/dev/null 2>/dev/null && echo '±' && return
    hg root >/dev/null 2>/dev/null && echo '☿' && return
    echo '~'
}

###########
# HISTORY #
###########

if [ -z "$HISTFILE" ]; then
    HISTFILE=$HOME/.zsh_history
fi
HISTSIZE=10000
SAVEHIST=10000

# Show history
case $HIST_STAMPS in
  "mm/dd/yyyy") alias history='fc -fl 1' ;;
  "dd.mm.yyyy") alias history='fc -El 1' ;;
  "yyyy-mm-dd") alias history='fc -il 1' ;;
  *) alias history='fc -l 1' ;;
esac

setopt APPEND_HISTORY
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.

# Use Arrow Keys (Up/Down) to navigate history
autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

[[ -n "$key[Up]"   ]] && bindkey -- "$key[Up]"   up-line-or-beginning-search
[[ -n "$key[Down]" ]] && bindkey -- "$key[Down]" down-line-or-beginning-search

##############
# EXTENSIONS #
##############

# Fish shell-like like syntax highlighting for Zsh.
if [ -z ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
  source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# Fish-like autosuggestions for zsh
if [ -z ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
  source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

############
# FACEBOOK #
############
send(){
    # usage: send target.txt
    # places file at ~/temp on your devserver
    # (make sure ~/temp already exists)
    scp "$1" fb:~/temp
}

get(){
    # usage: get target.txt
    # assumes target.txt is at ~/temp/target.txt
    # on your devserver
    scp "fb:~/temp/$1" ~/Downloads
}
# For larger files, I prefer rsync -Pavz to scp because it compresses the file during transfer (-z), and shows a progress bar (-P)
# - Walker Mills
